package appkit

import "github.com/dchest/uniuri"

type TagsProps struct {
	Tags         string
	Label        string
	XBindLabel   string
	OnAdd        string
	OnRemove     string
	HideAddInput bool
}

templ Tags(props TagsProps) {
	{{ id := uniuri.New() }}
	<div class="flex flex-col gap-1">
		if props.Label != "" || props.XBindLabel != "" {
			@InputLabel(&InputLabelProps{ID: id, Label: props.Label, XBindLabel: props.XBindLabel})
		}
		<ul x-show={ props.Tags + `.length` } class="flex items-center gap-2">
			<template x-for={ `(tag, idx) in ` + props.Tags } :key="idx">
				<li class="inline-flex items-center gap-1 rounded border border-positive-200 bg-positive-100 text-positive-500 py-1 pl-1.5 pr-[5px] lining-nums tabular-nums text-sm font-medium">
					<span x-text="tag"></span>
					<button class="text-positive-300" data-tooltip="remove tag" @click={ props.Tags + `.splice(idx, 1); ` + props.OnRemove + `(tag)` }>
						@CloseIcon()
					</button>
				</li>
			</template>
		</ul>
		if !props.HideAddInput {
			{{ addTag := `this.` + props.Tags + `.push(this.tags_newTag); this.` + props.OnAdd + `(this.tags_newTag); this.tags_newTag = ''` }}
			<div
				class="flex items-start gap-2 w-full"
				x-data={ `{
					tags_newTag: '',
					tags_error: '',

					tags_addTag() {
						this.tags_error = ''
						let nt = this.tags_newTag.trim()
						if (!nt) return
						const regex = /^(?:[a-z]|[a-z0-9][a-z0-9-+]*[a-z0-9])$/
						if (!nt.match(regex)) {
							this.tags_error = "invalid format";
							return
						}` +
						
						addTag +
				`	}
				}` }
			>
				<div class="flex-1">
					@InputText(&InputTextProps{ID: id, XModel: "tags_newTag", OnEnter: "tags_addTag", XBindError: "tags_error"})
				</div>
				<div class="mt-0.5">
					@Button(&ButtonProps{Label: "Add", OnClick: "tags_addTag"})
				</div>
			</div>
		}
	</div>
}
