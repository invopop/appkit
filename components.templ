package appkit

type InputLabelProps struct {
	Id         string
	Label      string
	XBindLabel string
}

type InputTextProps struct {
	Label      string
	Disabled   string
	Error      string
	Value      string
	XModel     string
	XBindError string
	XBindLabel string
	XBindValue string
}

templ InputLabel(props InputLabelProps) {
	<label
		for={ props.Id }
		class="text-sm font-medium text-neutral-500 mb-2"
		if (props.XBindLabel != "") {
			x-text={ props.XBindLabel }
		}
	>
		if (props.Label != "") {
			{ props.Label }
		}
	</label>
}

templ InputText(props InputTextProps) {
	<div class="flex flex-col">
		if props.Label != "" || props.XBindLabel != "" {
			@InputLabel(InputLabelProps{Label: props.Label, XBindLabel: props.XBindLabel})
		}
		<input
			type="text"
			class="py-1.5 px-2.5 border w-full rounded-md placeholder:text-neutral-500 text-base caret-accent-500 tracking-tight"
			:class={ props.getClasses() }
			if props.XModel != "" {
				x-model={ props.XModel }
			}
			if value := props.GetValue(); value != "" {
				:value={ value }
			}
			:disabled={ props.Disabled }
		/>
		if errorText := props.GetError(); errorText != "" {
			@InputError(errorText)
		}
	</div>
}

templ InputError(errorText string) {
	<p x-show={ errorText } class="mt-2 text-sm text-danger-500 flex items-center space-x-1">
		<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
			<path
				fill-rule="evenodd"
				clip-rule="evenodd"
				d="M8 14.5C11.5899 14.5 14.5 11.5899 14.5 8C14.5 4.41015 11.5899 1.5 8 1.5C4.41015 1.5 1.5 4.41015 1.5 8C1.5 11.5899 4.41015 14.5 8 14.5ZM7.99999 9.35C7.66862 9.35 7.39999 9.08137 7.39999 8.75V4.75C7.39999 4.41863 7.66862 4.15 7.99999 4.15C8.33137 4.15 8.59999 4.41863 8.59999 4.75L8.59999 8.75C8.59999 9.08137 8.33136 9.35 7.99999 9.35ZM8.75 11C8.75 11.4142 8.41421 11.75 8 11.75C7.58579 11.75 7.25 11.4142 7.25 11C7.25 10.5858 7.58579 10.25 8 10.25C8.41421 10.25 8.75 10.5858 8.75 11Z"
				fill="currentColor"
			></path>
		</svg>
		<span x-text={ errorText }></span>
	</p>
}

func (itp InputTextProps) getClasses() string {
	classes := "{" +
		"'text-danger-500 border-danger-400 outline-danger-400': " + itp.GetError() + "," +
		"'border-neutral-200 hover:border-neutral-300 text-neutral-800 outline-none focus:border-accent-500': !" + itp.GetError() +
		"}"
	return classes
}

func (itp InputTextProps) GetValue() string {
	if itp.XBindValue != "" {
		return itp.XBindValue
	}

	return "'" + itp.Value + "'"
}

func (itp InputTextProps) GetError() string {
	if itp.XBindError != "" {
		return itp.XBindError
	}

	return "'" + itp.Error + "'"
}
