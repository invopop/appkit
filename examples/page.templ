package examples

import "github.com/invopop/appkit"

// Page provides the main wrapper around content.
templ Page() {
	<html>
		<head>
			<title>Invopop - Appkit</title>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			@appkit.DefaultCSS()
			@appkit.DefaultScripts()
		</head>
		<body>
			<main
				class="p-4"
				x-data="{
				inputText: {
					label: 'Name',
					errorText: '',
					disabled: false,
					value: ''
				},
				select: {
					label: 'Name',
					errorText: '',
					disabled: false,
					value: '',
					options: ['', 'Sam', 'Juan', 'Javi', 'Luismi']
				},
				textarea: {
					label: 'Name',
					errorText: '',
					disabled: false,
					value: '',
					rows: '4'
				},
				defaultButton: {
					disabled: false,
				},
				primaryButton: {
					disabled: false,
				}
			}"
			>
				// Info
				@fieldConfig(&config{
					Title: "Info Text",
				})
				<div>
					@appkit.Info() {
						The Silo Entry ID of the new document will be available in the
						@appkit.Code() {
							connected-silo-entry-id
						}
						shared meta field.
					}
				</div>
				// Input Text
				@fieldConfig(&config{
					Title:  "Input Text",
					XModel: "inputText.value",
					Inputs: []input{
						input{
							Label:  "Label",
							Type:   "text",
							Xmodel: "inputText.label",
						},
						input{
							Label:  "Error Text",
							Type:   "text",
							Xmodel: "inputText.errorText",
						},
						input{
							Label:  "Disabled",
							Type:   "checkbox",
							Xmodel: "inputText.disabled",
						},
					},
				})
				<div class="max-w-md">
					@appkit.InputText(
						&appkit.InputTextProps{
							XBindLabel: "inputText.label",
							XBindError: "inputText.errorText",
							Disabled:   "inputText.disabled",
							XModel:     "inputText.value",
						})
				</div>
				// Select
				@fieldConfig(&config{
					Title:  "Select",
					XModel: "select.value",
					Inputs: []input{
						input{
							Label:  "Label",
							Type:   "text",
							Xmodel: "select.label",
						},
						input{
							Label:  "Error Text",
							Type:   "text",
							Xmodel: "select.errorText",
						},
						input{
							Label:  "Disabled",
							Type:   "checkbox",
							Xmodel: "select.disabled",
						},
					},
				})
				<div class="max-w-md">
					@appkit.Select(
						&appkit.SelectProps{
							XBindLabel: "select.label",
							XBindError: "select.errorText",
							Disabled:   "select.disabled",
							XModel:     "select.value",
						}) {
						<template x-for="row in select.options" :key="row">
							<option
								:value="row"
								x-text="row"
							></option>
						</template>
					}
				</div>
				// Textarea
				@fieldConfig(&config{
					Title:  "Textarea",
					XModel: "textarea.value",
					Inputs: []input{
						input{
							Label:  "Label",
							Type:   "text",
							Xmodel: "textarea.label",
						},
						input{
							Label:  "Error Text",
							Type:   "text",
							Xmodel: "textarea.errorText",
						},
						input{
							Label:  "Rows",
							Type:   "number",
							Xmodel: "textarea.rows",
						},
						input{
							Label:  "Disabled",
							Type:   "checkbox",
							Xmodel: "textarea.disabled",
						},
					},
				})
				<div class="max-w-md">
					@appkit.Textarea(
						&appkit.InputTextareaProps{
							XBindLabel: "textarea.label",
							XBindError: "textarea.errorText",
							XBindRows:  "textarea.rows",
							Disabled:   "textarea.disabled",
							XModel:     "textarea.value",
						}) {
						<template x-for="row in select.options" :key="row">
							<option
								:value="row"
								x-text="row"
							></option>
						</template>
					}
				</div>
				// Default Button
				@fieldConfig(&config{
					Title: "Default Button",
					Inputs: []input{
						input{
							Label:  "Disabled",
							Type:   "checkbox",
							Xmodel: "defaultButton.disabled",
						},
					},
				})
				<div class="max-w-md">
					@appkit.Button(
						&appkit.ButtonProps{
							Label:    "Click Me",
							Disabled: "defaultButton.disabled",
							OnClick:  "alert('Default button clicked')",
						})
				</div>
				// Primary Button
				@fieldConfig(&config{
					Title: "Primary Button",
					Inputs: []input{
						input{
							Label:  "Disabled",
							Type:   "checkbox",
							Xmodel: "primaryButton.disabled",
						},
					},
				})
				<div class="max-w-md">
					@appkit.Button(
						&appkit.ButtonProps{
							Variant:  "primary",
							Label:    "Click Me",
							Disabled: "primaryButton.disabled",
							OnClick:  "alert('Primary button clicked')",
						})
				</div>
			</main>
		</body>
	</html>
}

type input struct {
	Label  string
	Type   string
	Xmodel string
}

type config struct {
	Title  string
	XModel string
	Inputs []input
}

templ fieldConfig(conf *config) {
	<hr class="mt-4"/>
	<h2 class="my-4">
		{ conf.Title }:
		if conf.XModel != "" {
			<span x-text={ conf.XModel }></span>
		}
	</h2>
	if conf.Inputs != nil {
		<div class="space-y-2 border border-black p-4 mb-4">
			<h3>Props</h3>
			for _, i := range conf.Inputs {
				<label class="text-sm inline-flex items-center gap-2 whitespace-nowrap mr-2">
					{ i.Label } <input
	type={ i.Type }
	if i.Type == "text" || i.Type == "number" {
		class="py-1.5 px-2.5 border w-full rounded-md"
	}
	x-model={ i.Xmodel }
/>
				</label>
			}
		</div>
	}
}
